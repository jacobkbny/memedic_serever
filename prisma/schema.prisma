// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    
  loginMethod String 
  role     Boolean   @default(false)
  created_at DateTime @default(now()) // Added field to record sign-up timestamp
  words     Word[]    // One-to-many relationship with Word
  likes     Like[]    // One-to-many relationship with Like
  bookmarks Bookmark[] // One-to-many relationship with Bookmark
}

model Word {
  id              Int       @id @default(autoincrement())
  word            String    
  definition      String
  example         String
  registrar       User      @relation(fields: [registrarId], references: [id])
  registrarId     Int
  pending         Boolean
  registered_time DateTime? // Nullable timestamp
  likes           Like[]    // One-to-many relationship with Like
  bookmarks       Bookmark[] // One-to-many relationship with Bookmark

  @@index([pending]) // Added index for faster filtering of pending words
  @@index([registered_time]) // Added index for faster filtering/sorting by registration time
}

model Like {
  id          Int   @id @default(autoincrement())
  user        User  @relation(fields: [userId], references: [id])
  userId      Int
  word        Word  @relation(fields: [wordId], references: [id])
  wordId      Int
  like_status Boolean

  @@unique([userId, wordId]) // Unique constraint on (userId, wordId)
  @@index([userId]) // Added index for faster filtering by userId
  @@index([wordId]) // Added index for faster filtering by wordId
  @@index([like_status]) // Added index for faster filtering by like_status
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  word   Word @relation(fields: [wordId], references: [id])
  wordId Int

  @@unique([userId, wordId]) // Unique constraint on (userId, wordId)
  @@index([userId]) // Added index for faster filtering by userId
  @@index([wordId]) // Added index for faster filtering by wordId
}